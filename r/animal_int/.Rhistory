library(dplyr)
library(tibble)
library(tidyr)
library(stringdist)
library(stringr)
# import data
allnames = read.csv("all_names.csv", header = FALSE) # df
focalnames = read.csv("focal_names.csv", header = FALSE) # df
interactions = as_tibble(read.csv("interactions.csv"))
# don't let characters in allnames be converted to factors
allnames = data.frame(lapply(allnames, as.character), stringsAsFactors=FALSE)
corrects = tolower(interactions$toward)    # made a copy of the col toward
# data cleaning
cleaning = function(x) {
x = gsub("\\?", "NA", x)   # replace ? with NA
x = gsub(" ", "", x)       # get rid of spaces
if (x == "") {  # replace blank row with NA
x = "NA"
}
x = gsub(",", " ", x)      # replace comma with space
x = str_trim(x, side = "right")
}
# clean up corrects and correct misspelled names with amatch()
for (i in 1:length(corrects)) {
# apply cleaning to each row of corrects and get the single names
corrects[i]=str_split(cleaning(corrects[i]), " ")
for (j in 1:length(corrects[[i]])) {
if (corrects[[i]][j] != "NA") {    # skip NA's and compare the rest
corrects[[i]][j] = allnames[(amatch(corrects[[i]][j],
tolower(allnames[1:length(allnames[,1]),]), maxDist = 5)),]
}
}
}
# interactions with correct spellings and unnested
all_interactions = interactions %>%
mutate(toward = corrects) %>%    # change toward to the correct version
unnest(toward) %>%  # makes each element of its own row
group_by(focal, behavior_cat) %>%
arrange(focal, behavior_cat) %>%
filter(toward != "NA")     # get rid of NA's since they don't belong
# count and transform to wide, didn't combine with ^, check unique interactions
interactions_count = all_interactions %>%
group_by(focal, behavior_cat,toward) %>%
tally() %>%    # count the freq of each interaction type with each focal
spread(toward, n)    # essentially make it wide
interactions_count[is.na(interactions_count)] = 0  # replace NA's with 0
print(head(interactions_count))
calcDist = function(x) {
# pairwise canberra dist
distMat = as.matrix(dist(x, method = "canberra"),labels = TRUE) # canberra D
rownames(distMat) = arrange(interactions_count, behavior_cat)[[1]][1:20]
colnames(distMat) = rownames(distMat)
return(distMat)
}
calcDist(interactions_count[,3:201])
aggression = by(interactions_count[,3:201], interactions_count$behavior_cat,
calcDist)
print(head(aggression))
View(interactions_count)
# apply calcDist to a data frame split by behavior_cat
can_dist = by(interactions_count[,3:201], interactions_count$behavior_cat,
calcDist)
par(mfrow = c(3,3))   # 3 graphs per row and col
graphcmd = function(x, y){
xcord1 = cmdscale(x)[, 1]   # xcord of the 2D pairwise dists
ycord1 = cmdscale(x)[, 2]   # ycord of the 2D pairwise dists
plot(xcord1, ycord1, main = paste(y, " MDS"))
text(xcord1, ycord1, labels = row.names(x), pos = 2, cex = 0.8)
}
graphcmd(can_dist$aggression, "Aggression")
graphcmd(can_dist$approach, "Approach")
graphcmd(can_dist$carry, "Carry")
graphcmd(can_dist$groom, "Groom")
graphcmd(can_dist$mate, "Mate")
graphcmd(can_dist$play, "Play")
graphcmd(can_dist$share, "Share")
graphcmd = function(x, y){
xcord1 = cmdscale(x)[, 1]   # xcord of the 2D pairwise dists
ycord1 = cmdscale(x)[, 2]   # ycord of the 2D pairwise dists
plot(xcord1, ycord1, main = paste(y, " MDS"), xaxt='n', yaxt='n')
text(xcord1, ycord1, labels = row.names(x), pos = 2, cex = 0.8)
}
graphcmd(can_dist$aggression, "Aggression")
graphcmd(can_dist$approach, "Approach")
graphcmd(can_dist$carry, "Carry")
graphcmd(can_dist$groom, "Groom")
graphcmd(can_dist$mate, "Mate")
graphcmd(can_dist$play, "Play")
graphcmd(can_dist$share, "Share")
graphcmd = function(x, y){
xcord1 = cmdscale(x)[, 1]   # xcord of the 2D pairwise dists
ycord1 = cmdscale(x)[, 2]   # ycord of the 2D pairwise dists
plot(xcord1, ycord1, main = paste(y, " MDS"), xaxt='n', yaxt='n')
text(xcord1, ycord1, labels = row.names(x), pos = 2, cex = 0.8)
}
# graphcmd for each interaction type
graphcmd(can_dist$aggression, "Aggression")
# graphcmd for each interaction type
graphcmd(can_dist$aggression, "Aggression")
graphcmd(can_dist$approach, "Approach")
graphcmd(can_dist$carry, "Carry")
graphcmd(can_dist$groom, "Groom")
graphcmd(can_dist$mate, "Mate")
graphcmd(can_dist$play, "Play")
graphcmd(can_dist$share, "Share")
View(interactions_count)
behavior_distance = function(df, behavior='aggression'){
df = df %>% filter(behavior_cat == behavior)
mat = as.matrix(df %>% select(-focal, -behavior_cat))
rownames(mat) = df$focal
dist(mat, method='canberra')
}
dist_mats = lapply(unique(interactions_count$behavior_cat),
behavior_distance, df=interactions_count)
attr(dist_mats, 'names') = unique(interactions_count$behavior_cat)
View(dist_mats)
dist_mats
dist_MDS = lapply(dist_mats, cmdscale)
# Convert each set to a tibble and join with bind_rows
make_tibble = function(i){
as.tibble(dist_MDS[[i]]) %>%
mutate(names=rownames(dist_MDS[[i]]),
behavior=names(dist_MDS)[[i]]) %>%
select(behavior, names, V1, V2)
}
mds = bind_rows(lapply(1:length(dist_MDS), make_tibble))
mds %>%
ggplot(aes(x=V1, y=V2)) +
facet_wrap(~Behavior) +
geom_point() +
ylab('MDS Coordinate 2') + xlab('MDS Coordinate 1')
names(dist_MDS)[[1]]
names(dist_mats)[[1]]
dist_mats[[1]]
rownames(dist_mats[[1]])
rownames(dist_mats[[1]])
colnames(dist_mats[[1]])
class(dist_mats[[1]])
class(dist_mats)
names(dist_mats)
dist_mats = lapply(unique(interactions_count$behavior_cat),
behavior_distance, df=interactions_count)
dist_mats
attr(dist_mats, 'names') = unique(interactions_count$behavior_cat)
dist_mats
names(dist_mats)
library(dplyr)
library(tibble)
library(tidyr)
library(stringdist)
library(stringr)
# import data
allnames = read.csv("all_names.csv", header = FALSE) # df
focalnames = read.csv("focal_names.csv", header = FALSE) # df
interactions = as_tibble(read.csv("interactions.csv"))
# don't let characters in allnames be converted to factors
allnames = data.frame(lapply(allnames, as.character), stringsAsFactors=FALSE)
corrects = tolower(interactions$toward)    # made a copy of the col toward
# data cleaning
cleaning = function(x) {
x = gsub("\\?", "NA", x)   # replace ? with NA
x = gsub(" ", "", x)       # get rid of spaces
if (x == "") {  # replace blank row with NA
x = "NA"
}
x = gsub(",", " ", x)      # replace comma with space
x = str_trim(x, side = "right")
}
# clean up corrects and correct misspelled names with amatch()
for (i in 1:length(corrects)) {
# apply cleaning to each row of corrects and get the single names
corrects[i]=str_split(cleaning(corrects[i]), " ")
for (j in 1:length(corrects[[i]])) {
if (corrects[[i]][j] != "NA") {    # skip NA's and compare the rest
corrects[[i]][j] = allnames[(amatch(corrects[[i]][j],
tolower(allnames[1:length(allnames[,1]),]), maxDist = 5)),]
}
}
}
# interactions with correct spellings and unnested
all_interactions = interactions %>%
mutate(toward = corrects) %>%    # change toward to the correct version
unnest(toward) %>%  # makes each element of its own row
group_by(focal, behavior_cat) %>%
arrange(focal, behavior_cat) %>%
filter(toward != "NA")     # get rid of NA's since they don't belong
# count and transform to wide, didn't combine with ^, check unique interactions
interactions_count = all_interactions %>%
group_by(focal, behavior_cat,toward) %>%
tally() %>%    # count the freq of each interaction type with each focal
spread(toward, n) %>%    # essentially make it wide
ungroup()
interactions_count[is.na(interactions_count)] = 0  # replace NA's with 0
print(head(interactions_count))
behavior_distance = function(df, behavior='aggression'){
df = df %>% filter(behavior_cat == behavior)
mat = as.matrix(df %>% select(-focal, -behavior_cat))
rownames(mat) = df$focal
dist(mat, method ='canberra')
}
dist_mats = lapply(unique(interactions_count$behavior_cat),
behavior_distance, df = interactions_count)
attr(dist_mats, 'names') = unique(interactions_count$behavior_cat)
dist_mats
names(dist_mats)
attr(dist_mats, 'names') = unique(as.character(interactions_count$behavior_cat))
names(dist_mats)
dist_MDS = lapply(dist_mats, cmdscale)
# Convert each set to a tibble and join with bind_rows
make_tibble = function(i){
as.tibble(dist_MDS[[i]]) %>%
mutate(names=rownames(dist_MDS[[i]]),
behavior=names(dist_MDS)[[i]]) %>%
select(behavior, names, V1, V2)
}
mds = bind_rows(lapply(1:length(dist_MDS), make_tibble))
mds %>%
ggplot(aes(x=V1, y=V2)) +
facet_wrap(~Behavior) +
geom_point() +
ylab('MDS Coordinate 2') + xlab('MDS Coordinate 1')
library(ggplot2)
mds %>%
ggplot(aes(x=V1, y=V2)) +
facet_wrap(~Behavior) +
geom_point() +
ylab('MDS Coordinate 2') + xlab('MDS Coordinate 1')
mds %>%
ggplot(aes(x=V1, y=V2)) +
facet_wrap(~behavior) +
geom_point() +
ylab('MDS Coordinate 2') + xlab('MDS Coordinate 1')
